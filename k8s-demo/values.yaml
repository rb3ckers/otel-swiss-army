components:
  frontend-proxy:
    ingress:
      enabled: true
      annotations: {}
      hosts:
        - host: "otel-demo.127.0.0.1.sslip.io"
          paths:
            - path: /
              pathType: Prefix
              port: 8080
  flagd:
    sidecarContainers:
      - name: flagd-ui
        useDefault:
          env: true
        service:
          port: 4000
        env:
          - name: FLAGD_METRICS_EXPORTER
            value: otel
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318
        resources:
          limits:
            memory: 100Mi
        volumeMounts:
          - name: config-rw
            mountPath: /app/data
opentelemetry-collector:
  extraEnvsFrom:
  - secretRef:
      name: open-telemetry-collector
  # Overriding the entire config to show what's possible, 
  # this is for a large part a copy of the default config of the otel-demo
  config:
    connectors:
      spanmetrics: {}
      spanmetrics/so:
        namespace: otel_span
    exporters:
      debug: {}
      opensearch:
        http:
          endpoint: http://opensearch:9200
          tls:
            insecure: true
        logs_index: otel
      otlp:
        endpoint: jaeger-collector:4317
        tls:
          insecure: true
      otlp/so:
        auth:
          authenticator: bearertokenauth/so
        endpoint: https://otlp-rbeckers.sandbox-main.sandbox.stackstate.io:443
      otlphttp/prometheus:
        endpoint: http://prometheus:9090/api/v1/otlp
        tls:
          insecure: true
    extensions:
      bearertokenauth/so:
        scheme: SUSEObservability
        token: ${env:API_KEY}
      health_check:
        endpoint: ${env:MY_POD_IP}:13133
    processors:
      batch: {}
      k8sattributes:
        extract:
          metadata:
          - k8s.namespace.name
          - k8s.deployment.name
          - k8s.statefulset.name
          - k8s.daemonset.name
          - k8s.cronjob.name
          - k8s.job.name
          - k8s.node.name
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.pod.start_time
        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.ip
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: connection
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
      resource:
        attributes:
        - action: insert
          from_attribute: k8s.pod.uid
          key: service.instance.id
      transform:
        error_mode: ignore
        trace_statements:
        - context: span
          statements:
          - replace_pattern(name, "\\?.*", "")
          - replace_match(name, "GET /api/products/*", "GET /api/products/{productId}")
    receivers:
      httpcheck/frontend-proxy:
        targets:
        - endpoint: http://frontend-proxy:8080
      jaeger:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:14250
          thrift_compact:
            endpoint: ${env:MY_POD_IP}:6831
          thrift_http:
            endpoint: ${env:MY_POD_IP}:14268
      otlp:
        protocols:
          grpc:
            endpoint: ${env:MY_POD_IP}:4317
          http:
            cors:
              allowed_origins:
              - http://*
              - https://*
            endpoint: ${env:MY_POD_IP}:4318
      prometheus:
        config:
          scrape_configs:
          - job_name: opentelemetry-collector
            scrape_interval: 10s
            static_configs:
            - targets:
              - ${env:MY_POD_IP}:8888
      redis:
        collection_interval: 10s
        endpoint: valkey-cart:6379
      zipkin:
        endpoint: ${env:MY_POD_IP}:9411
    service:
      extensions:
      - health_check
      - bearertokenauth/so
      pipelines:        
      logs:
        receivers: [otlp]
        processors: [k8sattributes, memory_limiter, resource, batch]
        exporters: [opensearch, debug]
      metrics:
        receivers: [httpcheck/frontend-proxy, redis, otlp, spanmetrics]
        processors: [k8sattributes, memory_limiter, resource, batch]
        exporters: [otlphttp/prometheus]
      metrics/so:
        receivers: [httpcheck/frontend-proxy, redis, otlp, spanmetrics/so]
        processors: [k8sattributes, memory_limiter, resource, batch]
        exporters: [otlp/so]
      traces:
        receivers: [otlp, jaeger, zipkin]
        processors: [k8sattributes, memory_limiter, resource, transform, batch]
        exporters: [otlp, otlp/so, spanmetrics/so, spanmetrics]
      telemetry:
        metrics:
          address: ${env:MY_POD_IP}:8888
          level: detailed
          readers:
          - periodic:
              exporter:
                otlp:
                  endpoint: otel-collector:4317
                  protocol: grpc
              interval: 10000
              timeout: 5000
  ingress:
    enabled: true
    annotations: {}
    hosts:
      - host: "otlp-http.127.0.0.1.sslip.io"
        paths:
          - path: /
            pathType: Prefix
            port: 4318
      - host: "otlp.127.0.0.1.sslip.io"
        paths:
          - path: /
            pathType: Prefix
            port: 4317

